package Taller1;
// Matías Pérez Sandoval Rut: 21.801.924-2 Carreara: ICCI 

import java.io.File; 
import java.util.Scanner; 
import java.io.FileNotFoundException;

public class Main {

	public static void main(String[] args) {
		try {
			//lectura de primeros archivos y separacion del mismo en partes 
			File archivoExperimento = new File("experimentos.txt");
			Scanner lectorExperimento = new Scanner(archivoExperimento);
		
			String[] identificador = new String[4];             
			String[] descripciones = new String[4];   
			int expCount = 0;
			
			while (lectorExperimento.hasNextLine ()) {
				String linea = lectorExperimento.nextLine ();
				String[] partes = linea.split(";");
				
				identificador[expCount] = partes[0];            
			    descripciones[expCount] = partes[1];  
			    expCount++;
			}
			lectorExperimento.close();
			
			//lectura del segundo archivo 
			File archivoPredicciones = new File("predicciones.txt");
			Scanner lectorPredicciones = new Scanner(archivoPredicciones); 
			
			String[] ids = {"Exp1", "Exp2", "Exp3", "Exp4"};
			int[][] matrizConfusion = new int[4][4];

			while (lectorPredicciones.hasNextLine()) {
				String linea = lectorPredicciones.nextLine(); 
				String[] partes = linea.split(";");
				//separacion de la parte real y el predicho 
				String idExp = partes[0];
                int real = Integer.parseInt(partes[1]);
                int predicho = Integer.parseInt(partes[2]);
                
                int indice = -1;
                for (int i = 0; i < ids.length; i++) {
                	if (ids[i].equals(idExp)) {
                		indice = i; 
                		break; 
                	}
                }
                if (indice != -1) {
                    if (real == 1 && predicho == 1) matrizConfusion[indice][0]++; 
                    else if (real == 0 && predicho == 1) matrizConfusion[indice][1]++; 
                    else if (real == 0 && predicho == 0) matrizConfusion[indice][2]++; 
                    else if (real == 1 && predicho == 0) matrizConfusion[indice][3]++; 
                    
                }
			}
            lectorPredicciones.close();
              
            //lectura del tercer archivo
            File archivoMetricas = new File ("metricas.txt"); 
            Scanner lectorMetricas = new Scanner(archivoMetricas); 
            
            String[] metricas = new String[4]; 
            int idMetricas = 0; 
            
            while (lectorMetricas.hasNext()) {
            	metricas[idMetricas] = lectorMetricas.nextLine(); 
            	idMetricas++; 
            	
            }
			lectorMetricas.close(); 
			
			Scanner s = new Scanner(System.in); 
			int opcion = 0;  
				
			while (opcion!=9) { // Menu con lectura de teclado incluyendo a Admin y Usuario
				System.out.println("----------MENU----------");
				System.out.println("1. Ver la matriz completa de métricas -Admin-");
				System.out.println("2. Identificar el experimento con mejor F1-Score -Admin-");
				System.out.println("3. Calcular promedio global de cada metrica -Admin-");
				System.out.println("4. Comparar dos experimentos lado a lado -Admin-");
				System.out.println("5. Ver listas de experimentos -Usuario-");
				System.out.println("6. Mostrar matriz de confusion de un experimento -Usuario-");
				System.out.println("7. Ver metricas de un experimento -Usuario-");
				System.out.println("8. Ver promedio de Accuracy de todos los modelos -Usuario-");
				System.out.println("9. Salir");
				System.out.println("Ingrese una opcion:");
				opcion = s.nextInt(); 
				s.nextLine(); 
				
				switch (opcion) {
				
				//Opcion 1, le da la informacion de la matriz completa de metricas
				case 1: 
					System.out.println("Matriz completa de metrices -Admin-");
					for (int i = 0; i < ids.length; i++) {
                        int TP = matrizConfusion[i][0];
                        int FP = matrizConfusion[i][1];
                        int TN = matrizConfusion[i][2];
                        int FN = matrizConfusion[i][3];
                        
                        double accuracy = 0, precision = 0, recall = 0, f1 = 0;//Definir Variables
                        
                        //Calculo manual 
                        if (TP + FP + TN + FN != 0){
                            accuracy = (double)(TP + TN) / (TP + FP + TN + FN);}
                        if (TP + FP != 0){
                            precision = (double)TP / (TP + FP);}
                        if (TP + FN != 0){
                            recall = (double)TP / (TP + FN);}
                        if ((precision + recall) != 0){
                            f1 = 2 * (precision * recall) / (precision + recall);}
                        
                        //Redondeo de decimales 
                        accuracy = Math.round(accuracy * 100.0)/100.0;
                        precision = Math.round(precision * 100.0)/100.0;
                        recall = Math.round(recall * 100.0)/100.0;
                        f1 = Math.round(f1 * 100.0)/100.0;

                        System.out.println(ids[i] + ": " + metricas[0] + "=" + accuracy + ", " 
                                           + metricas[1] + "=" + precision + ", " 
                                           + metricas[2] + "=" + recall + ", " 
                                           + metricas[3] + "=" + f1);;
                    }
                    break;

                    
                case 2: 
                    double mejorF1 = -1;
                    String mejorId = "";
                    for (int i = 0; i < ids.length; i++) {
                        int TP = matrizConfusion[i][0];
                        int FP = matrizConfusion[i][1];
                        int TN = matrizConfusion[i][2];
                        int FN = matrizConfusion[i][3];

                        double precision = 0, recall = 0, f1 = 0;

                
                        if (TP + FP != 0){
                            precision = (double)TP / (TP + FP);}
                        if (TP + FN != 0){
                            recall = (double)TP / (TP + FN);}
                        if ((precision + recall) != 0){
                            f1 = 2 * (precision * recall) / (precision + recall);}

                        if (f1 > mejorF1) { mejorF1 = f1; mejorId = ids[i]; }
                    }
                    double mejorF1Redondeado = Math.round(mejorF1 * 100.0) / 100.0;//redondeo a 2 decimales

                    System.out.println("Experimento con mejor F1-Score: " + mejorId + " (F1=" + mejorF1Redondeado + ")");
                    break;

                    
                case 3: 
                    double sumAccuracy = 0, sumPrecision = 0, sumRecall = 0, sumF1 = 0;
                    for (int i = 0; i < ids.length; i++) {
                        int TP = matrizConfusion[i][0];
                        int FP = matrizConfusion[i][1];
                        int TN = matrizConfusion[i][2];
                        int FN = matrizConfusion[i][3];
                        double accuracy = 0, precision = 0, recall = 0, f1 = 0;

                        if (TP + FP + TN + FN != 0){
                            accuracy = (double)(TP + TN) / (TP + FP + TN + FN);}
                        if (TP + FP != 0){
                            precision = (double)TP / (TP + FP);}
                        if (TP + FN != 0){
                            recall = (double)TP / (TP + FN);}
                        if ((precision + recall) != 0){
                            f1 = 2 * (precision * recall) / (precision + recall);}

                        sumAccuracy += accuracy;
                        sumPrecision += precision;
                        sumRecall += recall;
                        sumF1 += f1;
                    }
                    double promAccuracy = Math.round((sumAccuracy / ids.length) * 100.0)/100.0;
                    double promPrecision = Math.round((sumPrecision / ids.length) * 100.0)/100.0;
                    double promRecall   = Math.round((sumRecall   / ids.length) * 100.0)/100.0;
                    double promF1       = Math.round((sumF1       / ids.length) * 100.0)/100.0;

                    System.out.println("Promedios globales: " 
                        + metricas[0] + "=" + promAccuracy + ", " 
                        + metricas[1] + "=" + promPrecision + ", " 
                        + metricas[2] + "=" + promRecall   + ", " 
                        + metricas[3] + "=" + promF1);
                    break;

                    
                case 4: 
                    System.out.print("Ingrese primer ID: ");
                    String id1 = s.nextLine();
                    System.out.print("Ingrese segundo ID: ");
                    String id2 = s.nextLine();

                    int idx1 = -1, idx2 = -1;//Busqueda y comparacion de las ID almacenadas
                    for (int i = 0; i < ids.length; i++) {
                        if (ids[i].equals(id1)) idx1 = i;
                        if (ids[i].equals(id2)) idx2 = i;
                    }
                    
                    if (idx1 != -1 && idx2 != -1) {//Comparacion de ID
                        System.out.println("Comparación de experimentos:");
                        System.out.println("ID-TP-FP-TN-FN-Accuracy-Precision-Recall-F1-Score");
                        for (int i : new int[]{idx1, idx2}) {
                            int TP = matrizConfusion[i][0], FP = matrizConfusion[i][1], TN = matrizConfusion[i][2], FN = matrizConfusion[i][3];
                            double accuracy = 0, precision = 0, recall = 0, f1 = 0;

                            if (TP + FP + TN + FN != 0){
                                accuracy = (double)(TP + TN) / (TP + FP + TN + FN);}
                            if (TP + FP != 0){
                                precision = (double)TP / (TP + FP);}
                            if (TP + FN != 0){
                                recall = (double)TP / (TP + FN);}
                            if ((precision + recall) != 0){
                                f1 = 2 * (precision * recall) / (precision + recall);}

                            double acc2 = Math.round(accuracy * 100.0)/100.0;
                            double prec2 = Math.round(precision * 100.0)/100.0;
                            double rec2  = Math.round(recall * 100.0)/100.0;
                            double f12   = Math.round(f1 * 100.0)/100.0;

                            System.out.println(
                                ids[i] + " " + TP + " " + FP + " " + TN + " " + FN + " " 
                                + acc2 + " " + prec2 + " " + rec2 + " " + f12);
                        }

                    } 
                    else 
                    {
                        System.out.println("Alguno de los IDs no existe.");//Correcion de mensaje, en caso de colocar mal la ID
                    }
                    break;
                    
                    
                case 5:
                    System.out.println("Lista de experimentos:");
                    for (int i = 0; i < ids.length; i++) {
                        System.out.println("- " + ids[i] + "  " + descripciones[i]);
                    }
                    break;

                case 6: 
                    System.out.print("Ingrese ID del experimento: ");
                    String buscarId = s.nextLine();
                    int idx = -1;
                    for (int i = 0; i < ids.length; i++)//Almacenar y buscar la ID
                        if (ids[i].equals(buscarId)) { idx = i; 
                        break; 
                        }
                    if (idx != -1) {
                        int[] m = matrizConfusion[idx];
                        System.out.println("Matriz de confusión: TP=" + m[0] + ", FP=" + m[1] + ", TN=" + m[2] + ", FN=" + m[3]);
                    } else System.out.println("Experimento no encontrado.");//Correcion de mensaje
                    break;

                case 7: 
                    System.out.print("Ingrese ID del experimento: ");
                    String idMetri = s.nextLine();
                    int indiceMetri = -1;
                    for (int i = 0; i < ids.length; i++) {
                        if (ids[i].equals(idMetri)) 
                        { indiceMetri = i;
                        break; 
                        }
                        
                    }
                    if (indiceMetri != -1) {
                        int TP = matrizConfusion[indiceMetri][0];
                        int FP = matrizConfusion[indiceMetri][1];
                        int TN = matrizConfusion[indiceMetri][2];
                        int FN = matrizConfusion[indiceMetri][3];

                        double accuracy = 0, precision = 0, recall = 0, f1 = 0;

                        if (TP + FP + TN + FN != 0){
                            accuracy = (double)(TP + TN) / (TP + FP + TN + FN);}
                        if (TP + FP != 0){
                            precision = (double)TP / (TP + FP);}
                        if (TP + FN != 0){
                            recall = (double)TP / (TP + FN);}
                        if ((precision + recall) != 0){
                            f1 = 2 * (precision * recall) / (precision + recall);}

                        double acc2 = Math.round(accuracy * 100.0)/100.0;
                        double prec2 = Math.round(precision * 100.0)/100.0;
                        double rec2  = Math.round(recall * 100.0)/100.0;
                        double f12   = Math.round(f1 * 100.0)/100.0;

                        System.out.println("Métricas de " + idMetri + ":");
                        System.out.println(metricas[0] + ": " + acc2);
                        System.out.println(metricas[1] + ": " + prec2);
                        System.out.println(metricas[2] + ": " + rec2);
                        System.out.println(metricas[3] + ": " + f12);
                    } 
                    else 
                    {
                        System.out.println("Experimento no encontrado.");
                    }
                    break;

                case 8:
                    double sumaAcc = 0;
                    for (int i = 0; i < ids.length; i++) {
                        int TP = matrizConfusion[i][0];
                        int FP = matrizConfusion[i][1];
                        int TN = matrizConfusion[i][2];
                        int FN = matrizConfusion[i][3];
                        double acc = (TP + TN) / (double)(TP + FP + TN + FN);
                        sumaAcc += acc;
                    }
                    double promedioAcc = Math.round((sumaAcc / ids.length) * 100.0)/100.0;
                    System.out.println("Promedio de Accuracy: " + promedioAcc);
                    break;

                case 9:
                    System.out.println("Salir.");
                    break;

                default:
                    System.out.println("Opción inválida.");
            }
        }

    } catch (FileNotFoundException e) {
        System.out.println("Error: archivo no encontrado");//Correcion de error en caso de no encontrar archivos
    		}
	}	
}
/*
	private static boolean lectorMetricas() {
		// TODO Auto-generated method stub
		return false;
	}

	private static boolean lectorMetricas() {
		// TODO Auto-generated method stub
		return false;
*/	
